// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`GH PubSub: Service Events Message Proxying/Eventing should delegate messaging into the system if clients are expected to hear from the explicit event type 1`] = `
Array [
  "api.broadcast",
  Object {
    "args": Array [
      Object {
        "connectTarget": "testConnectTarget",
        "eventClassification": "testEventClassification1",
        "platform": Object {
          "name": "testPlatform",
        },
        "pubSubMsgId": "someFakeUUID",
      },
    ],
    "event": "gh-messaging.evented",
    "rooms": Array [
      "someClientId",
    ],
  },
]
`;

exports[`GH PubSub: Service Service Actions Register a Single Event should delegate actual registration to the underlying platform service 1`] = `
Array [
  "twitch",
  "testconnecttarget",
  Array [
    "testEventClassification1",
    "testEventClassification2",
  ],
]
`;

exports[`GH PubSub: Service Service Actions Register a Single Event should emit/mark the socket as "in use" to avoid auto-disconnect 1`] = `
Array [
  "api.socket-used",
  Object {
    "socketId": "testSocketId",
  },
]
`;

exports[`GH PubSub: Service Service Actions Register a Single Event should gracefully error and return a PubSub Registration object indicating said error 1`] = `
Object {
  "error": "fake connect error",
  "pubsub": Object {
    "connectTarget": "testconnecttarget",
    "platformName": "twitch",
  },
  "registered": false,
  "type": "messaging",
}
`;

exports[`GH PubSub: Service Service Actions Simulate should delegate a faked native event to the proper platform to simulate/propagate/etc 1`] = `
Array [
  "twitch-chat.simulate",
  Object {
    "connectTarget": "testConnectTarget",
    "platformEventData": "testPlatformEventData",
    "platformEventName": "testPlatformEventName",
  },
]
`;

exports[`GH PubSub: Service Service Actions Unregister All Events should delegate a call to ourself to unregister each known registration for a connection ID (aka Socket ID) 1`] = `
Array [
  "gh-pubsub.unregister",
  Object {
    "connectTarget": "testConnectTarget",
    "platformName": "testPlatformName",
  },
  Object {
    "meta": Object {
      "$socketId": "testSocketId",
    },
  },
]
`;

exports[`GH PubSub: Service Service Actions Unregister a Single Event should disconnect the target from the platform if there are no connections after unregistering 1`] = `
Object {
  "pubsub": Object {
    "connectTarget": "testconnecttarget",
    "platformName": "twitch",
  },
  "type": "messaging",
  "unregistered": true,
}
`;

exports[`GH PubSub: Service Service Actions Unregister a Single Event should uncache the target for the Connection ID (aka Socket ID) 1`] = `
Object {
  "pubsub": Object {
    "connectTarget": "testconnecttarget",
    "platformName": "twitch",
  },
  "type": "messaging",
  "unregistered": true,
}
`;
